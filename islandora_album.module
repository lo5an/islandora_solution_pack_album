<?php

/**
 * @file
 * Sample hook implementations for a SP defining RELS-EXT relationships.
 */

/**
 * Implements hook_menu().
 */
function islandora_album_menu() {
  $items = array();
  $items['islandora/object/%islandora_object/datastreams/LYRICS/edit'] = array(
    'title' => 'Edit LYRICS Datastream',
    'file' => 'includes/lyrics.form.inc',
    'page callback' => 'islandora_album_edit_lyrics',
    'page arguments' => array(2),
    'access callback' => 'islandora_album_edit_lyrics_access',
    'access arguments' => array(2),
    'type' => MENU_CALLBACK,
  );
  $items['islandora/object/%islandora_object/manage/tracklist'] = array(
    'title' => 'Tracklist',
    'page callback' => 'islandora_album_manage_tracklist',
    'page arguments' => array(2),
    'access callback' => 'islandora_album_manage_tracklist_access',
    'access arguments' => array(2),
    'file' => 'includes/manage.form.inc',
    'type' => MENU_LOCAL_TASK,
  );
  return $items;
}

/**
 * Access callback for lyrics editing.
 */
function islandora_album_edit_lyrics_access(AbstractObject $object) {
  return (isset($object['LYRICS']) && $object['LYRICS']->mimetype == 'text/plain'); 
}

/**
 * Access callback for tracklist management.
 */
function islandora_album_manage_tracklist_access(AbstractObject $object) {
  return in_array('islandora:albumCModel', $object->models);
}

/**
 * Implements hook_islandora_edit_datastream_registry().
 */
function islandora_album_islandora_edit_datastream_registry($object, $dsid) {
  // The edit_datastream_registry hook runs once for each DSID on the object.
  // We would like to place this solely on the LYRICS object.
  if ($dsid->id == 'LYRICS') {
    return array(
      array(
        'name' => t('LYRICS Edit Route'),
        // This matches the edit route set up in islandora_audio_menu().
        'url' => "islandora/object/{$object->id}/datastreams/LYRICS/edit",
      ),
    );
  }
}

/**
 * Implements hook_islandora_required_objects().
 */
function islandora_album_islandora_required_objects(IslandoraTuque $connection) {
  $path = drupal_get_path('module', 'islandora_album');
  // Content Model.
  $cmodel = $connection->repository->constructObject('islandora:albumCModel');
  $cmodel->owner = 'fedoraAdmin';
  $cmodel->label = 'Islandora Album Content Model';
  $cmodel->models = 'fedora-system:ContentModel-3.0';
  // Content Model: DS-COMPOSITE-MODEL.
  $ds_cm = $cmodel->constructDatastream('DS-COMPOSITE-MODEL', 'X');
  $ds_cm->label = 'DS-COMPOSITE-MODEL';
  $ds_cm->mimetype = 'application/xml';
  $ds_cm->setContentFromFile("$path/xml/islandora_album_ds_composite_model.xml", FALSE);
  $cmodel->ingestDatastream($ds_cm);
  // Collection.
  $collection = $connection->repository->constructObject('islandora:album_collection');
  $collection->owner = 'fedoraAdmin';
  $collection->label = 'Album Collection';
  $collection->models = 'islandora:collectionCModel';
  $collection->relationships->add(FEDORA_RELS_EXT_URI, 'isMemberOfCollection', 'islandora:root');
  // Collection: Collection Policy.
  $policy = $collection->constructDatastream('COLLECTION_POLICY', 'X');
  $policy->label = 'Collection Policy';
  $policy->mimetype = 'application/xml';
  $policy->setContentFromFile("$path/xml/islandora_album_collection_policy.xml", FALSE);
  $collection->ingestDatastream($policy);
  // Collection: Thumbnail.
  $tn = $collection->constructDatastream('TN', 'M');
  $tn->label = 'Thumbnail';
  $tn->mimetype = 'image/png';
  $tn->setContentFromFile("$path/images/folder.png", FALSE);
  $collection->ingestDatastream($tn);

  return array(
    'islandora_album' => array(
      'title' => 'Islandora Album',
      'objects' => array(
        $cmodel,
        $collection,
      ),
    ),
  );
}

/**
 * Implements hook_cmodel_pid_islandora_object_purged().
 */
function islandora_album_islandora_albumcmodel_islandora_object_purged($pid) {
  // When we purge an islandora:albumCModel object, we also want to remove its
  // relationships from any existing children, which is what we're up to here.
  $children = islandora_album_get_track_pids($pid);
  foreach ($children as $child) {
    $escaped_pid = str_replace(':', '_', $pid);
    $child_object = islandora_object_load($child['pid']);
    $child_object->relationships->remove(FEDORA_RELS_EXT_URI, 'isTrackOf', $pid);
    $child_object->relationships->remove(ISLANDORA_RELS_EXT_URI, "isTrackNumberOf$escaped_pid");
  }
}

/**
 * Implements hook_islandora_basic_collection_get_query_optionals().
 */
function islandora_album_islandora_basic_collection_get_query_optionals($type) {
  // The plan here is to remove objects with an isTrackOf relationship from the
  // collection display. To accomplish this, a query optional is set up to bind
  // results to the graph that have isTrackOf relationships so that we can
  // filter them out later.
  if ($type == 'view') {
    return format_string('?object <!uriisTrackOf> ?track', array(
      '!uri' => FEDORA_RELS_EXT_URI,
    ));
  }
}

/**
 * Implements hook_islandora_basic_collection_get_query_filters().
 */
function islandora_album_islandora_basic_collection_get_query_filters($type) {
  // The actual filtration happens here - we negate anything that doesn't have
  // a ?track value bound.
  if ($type == 'view') {
    return '!bound(?track)';
  }
}

/**
 * Implements hook_islandora_solr_query().
 */
function islandora_album_islandora_solr_query($islandora_solr_query) {
  // Much the same as the SPARQL query filter, but for Solr instead. We remove
  // any items that have isTrackOf entries in their Solr doc.
  $islandora_solr_query->solrParams['fq'][] = '-RELS_EXT_isTrackOf_uri_mt:[* TO *]';
}

/**
 * Implements hook_islandora_get_breadcrumb_query_predicates().
 */
function islandora_album_islandora_get_breadcrumb_query_predicates(AbstractObject $object) {
  // And again, for the breadcrumbs. Rather than return the object we're looking
  // at, return the parent instead.
  return array('fedora-rels-ext:isTrackOf');
}

/**
 * Implements hook_islandora_ingest_steps_alter().
 */
function islandora_album_islandora_ingest_steps_alter(array &$steps, array &$form_state) {
  // Here, we're hijacking the islandora_audio_upload ingest step and replacing
  // it with a custom one in this module. This is the lazy (read: incorrect) way
  // of doing it; realistically, we should be appending form elements to the
  // actual audio upload form. This will suffice for demonstration purposes,
  // though.
  if (isset($steps['islandora_audio_upload'])) {
    $steps['islandora_audio_upload'] = array(
      'weight' => 10,
      'type' => 'form',
      'form_id' => 'islandora_album_audio_upload_form',
      'module' => 'islandora_album',
      'file' => 'includes/audio_upload.form.inc',
    );
  }
}

/**
 * Implements hook_cmodel_pid_dsid_islandora_datastream_alter().
 */
function islandora_album_islandora_sp_audiocmodel_lyrics_islandora_datastream_alter(AbstractObject $object, AbstractDatastream $datastream, array &$context) {
  // Get the parent, so we can get the rest of the children.
  $track_of = $object->relationships->get(FEDORA_RELS_EXT_URI, 'isTrackOf');
  $track_of = islandora_object_load($track_of[0]['object']['value']);
  if ($track_of) {
    $connection = islandora_get_tuque_connection();
    $new_lyrics = '';

    // Get the tracks.
    $tracks = islandora_album_get_track_pids($track_of->id, TRUE);

    // If there are no tracks, we're done here.
    if (empty($tracks)) {
      return;
    }

    // Generate a FULL_LYRICS datastream if necessary.
    if (!isset($track_of['FULL_LYRICS'])) {
      $full_lyrics = $object->constructDatastream('FULL_LYRICS', 'M');
      $full_lyrics->mimetype = 'text/plain';
      $full_lyrics->label = 'Full Lyrics';
      $track_of->ingestDatastream($full_lyrics);
    }

    // Cycle through the tracks to post it.
    foreach ($tracks as $result) {
      $child = islandora_object_load($result);
      $new_lyrics .= $object->label . "\n\n";
      $datastream = islandora_datastream_load('LYRICS', $child);
      $new_lyrics .= $datastream->content . "\n\n";
    }
    $new_lyrics = substr($new_lyrics, 0, -2);
    // Set the content.
    $track_of['FULL_LYRICS']->setContentFromString($new_lyrics);
  }
}

/**
 * Gets the tracks on an album.
 */
function islandora_album_get_track_pids($pid, $pids_only = FALSE) {
  $objects = array();

  $connection = islandora_get_tuque_connection();
  $escaped_pid = str_replace(':', '_', $pid);
  if ($connection) {
    $query = <<<EOQ
PREFIX islandora-rels-ext: <http://islandora.ca/ontology/relsext#>
SELECT ?pid ?track ?title
FROM <#ri>
WHERE {
  ?pid <fedora-model:label> ?title ;
       <fedora-rels-ext:isTrackOf> <info:fedora/$pid> .
  OPTIONAL {
    ?pid islandora-rels-ext:isTrackNumberOf$escaped_pid ?track
  }
}
EOQ;
    $results = $connection->repository->ri->sparqlQuery($query);

    $sort = function($a, $b) {
      $a = $a['track']['value'];
      $b = $b['track']['value'];
      if ($a === $b) {
        return 0;
      }
      if (empty($a)) {
        return -1;
      }
      if (empty($b)) {
        return -1;
      }
      return $a - $b;
    };
    uasort($results, $sort);

    foreach ($results as $result) {
      $object = islandora_object_load($result['pid']['value']);
      if (islandora_object_access(ISLANDORA_VIEW_OBJECTS, $object)) {
        if ($pids_only) {
          $objects[] = $result['pid']['value'];
        }
        else {
          $objects[$result['pid']['value']] = array(
            'pid' => $result['pid']['value'],
            'track' => $result['track']['value'],
            'title' => $result['title']['value'],
          );
        }
      }
    }
  }

  return $objects;
}
